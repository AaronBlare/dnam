# @package _global_

project_name: tabnetpl

is_cv: False
n_splits: 5
is_stratified: True

debug: False
print_config: True
ignore_warnings: True
test_after_training: True

seed: 322
in_dim: 314367
out_dim: 2

data_type: "all_together"
base_dir: "E:/YandexDisk/Work/pydnameth/datasets/meta/tasks/GPL13534_Blood_Schizo_Control"
work_dir: "${base_dir}/models/${project_name}"
data_dir: "${base_dir}/${data_type}"

datamodule_type: "datamodule_double"

# specify here default training configuration
defaults:
  - override /datamodule: null
  - override /trainer: default.yaml # choose trainer from 'configs/trainer/'
  - override /model: tabnetpl.yaml
  - override /callbacks: regular.yaml
  - override /logger: many_loggers.yaml # set logger here or use command line (e.g. `python run.py logger=wandb`)
  - override /hydra/hydra_logging: colorlog
  - override /hydra/job_logging: colorlog

datamodule_tmp:
  _target_: src.datamodules.dnam.DNAmSingleDataModule
  path: ${data_dir}
  cpgs_fn: "${data_dir}/cpgs/${in_dim}.xlsx"
  statuses_fn: "${base_dir}/statuses/${out_dim}.xlsx"
  dnam_fn: "mvals_train_val.pkl"
  pheno_fn: "pheno_train_val.pkl"
  outcome: "Status"
  batch_size: 64
  trn_val_tst_split: [0.8, 0.2, 0.0]
  num_workers: 0
  pin_memory: False
  seed: ${seed}
  weighted_sampler: True

datamodule:
  _target_: src.datamodules.dnam.DNAmDoubleDataModule
  path: ${data_dir}
  cpgs_fn: "${data_dir}/cpgs/${in_dim}.xlsx"
  statuses_fn: "${base_dir}/statuses/${out_dim}.xlsx"
  dnam_trn_val_fn: "mvals_train_val.pkl"
  pheno_trn_val_fn: "pheno_train_val.pkl"
  dnam_tst_fn: "mvals_test.pkl"
  pheno_tst_fn: "pheno_test.pkl"
  outcome: "Status"
  batch_size: 64
  trn_val_tst_split: [0.8, 0.2]
  num_workers: 0
  pin_memory: False
  seed: ${seed}
  weighted_sampler: True

trainer:
  gpus: 1
  min_epochs: 1
  max_epochs: 1000
  weights_summary: null
  progress_bar_refresh_rate: 10
  resume_from_checkpoint: null

model:
  task: "classification"
  input_dim: ${in_dim}
  output_dim: ${out_dim}
  n_d_n_a: 8
  n_steps: 3
  gamma: 1.3
  n_independent: 1
  n_shared: 2
  virtual_batch_size: 128
  mask_type: "sparsemax"
  loss_type: "CrossEntropyLoss"
  optimizer_lr: 0.02
  optimizer_weight_decay: 0.0
  scheduler_step_size: 50
  scheduler_gamma: 0.9

callbacks:
  model_checkpoint:
    monitor: "val/f1_weighted" # name of the logged metric which determines when model is improving
    mode: "max" # can be "max" or "min"
    save_top_k: 1 # save k best models (determined by above metric)
    save_last: False # additionaly always save model from last epoch
    verbose: False
    dirpath: "checkpoints/"
    filename: "{epoch:03d}"
    auto_insert_metric_name: False

  early_stopping:
    monitor: "val/f1_weighted" # name of the logged metric which determines when model is improving
    mode: "max" # can be "max" or "min"
    patience: 50 # how many epochs of not improving until training stops
    min_delta: 0 # minimum change in the monitored metric needed to qualify as an improvement
