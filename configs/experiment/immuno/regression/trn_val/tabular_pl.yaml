# @package _global_

task: regression
data_type: immuno
model_type: widedeep_tab_mlp # tabnet node widedeep_tab_mlp widedeep_tab_resnet
target: Age

project_name: ${data_type}_trn_val_${model_type}

seed: 1337

in_dim: 1
out_dim: 1

cv_is_split: True
cv_n_splits: 5
cv_n_repeats: 5

optimized_metric: mean_absolute_error
optimized_mean: cv_mean
optimized_part: val # tst
direction: min

embed_dim: 32

is_shuffle: False

debug: False
print_config: True
ignore_warnings: True
test_after_training: True

max_epochs: 2000
patience: 200

base_dir: "E:/YandexDisk/Work/pydnameth/datasets/GPL21145/GSEUNN/special/021_ml_data/${data_type}"
work_dir: "${base_dir}/models/${project_name}"
data_dir: "${base_dir}"

# SHAP values
is_shap: False # True False
is_shap_save: False
shap_explainer: Kernel # Tree Kernel Deep
shap_bkgrd: trn # trn all tree_path_dependent

# LIME weights
is_lime: False # True False
lime_bkgrd: trn # trn all
lime_num_features: all # 10 all
lime_save_weights: True

# Plot params
num_top_features: 10
num_examples: 10

# specify here default training configuration
defaults:
  - _self_
  - override /datamodule: null
  - override /trainer: default.yaml # choose trainer from 'configs/trainer/'
  - override /model: null
  - override /callbacks: regular.yaml
  - override /logger: many_loggers.yaml # set logger here or use command line (e.g. `python run.py logger=wandb`)
  - override /hydra/hydra_logging: colorlog
  - override /hydra/job_logging: colorlog

datamodule:
  _target_: src.datamodules.tabular.TabularDataModule
  task: ${task}
  feats_con_fn: "${data_dir}/feats_con.xlsx"
  feats_cat_fn: null
  feats_cat_encoding: label
  feats_cat_embed_dim: ${embed_dim}
  target: ${target}
  target_classes_fn: null
  data_fn: "${data_dir}/260_imp(fast_knn)_replace(quarter).xlsx"
  data_index: index
  data_imputation: fast_knn
  split_by: trn_val
  split_trn_val: [0.80, 0.20]
  split_top_feat: null
  split_explicit_feat: Split
  batch_size: 64
  num_workers: 0
  pin_memory: False
  seed: ${seed}
  weighted_sampler: True

trainer:
  gpus: 1
  min_epochs: 1
  max_epochs: ${max_epochs}
  weights_summary: null
  progress_bar_refresh_rate: 10 #10
  resume_from_checkpoint: null

model:
  type: ${model_type}

widedeep_tab_mlp:
  _target_: src.models.tabular.widedeep.tab_mlp.TabMLPModel
  task: ${task}
  loss_type: "L1Loss"
  input_dim: ${in_dim}
  output_dim: ${out_dim}
  optimizer_lr: 0.01
  optimizer_weight_decay: 0.0
  scheduler_step_size: 100
  scheduler_gamma: 0.9
  column_idx: null
  cat_embed_input: null
  cat_embed_dropout: 0.1
  use_cat_bias: False
  cat_embed_activation: null
  continuous_cols: null
  cont_norm_layer: 'batchnorm'
  embed_continuous: False
  cont_embed_dim: 32
  cont_embed_dropout: 0.1
  use_cont_bias: True
  cont_embed_activation: null
  mlp_hidden_dims:
  - 200
  - 100
  - ${out_dim}
  mlp_activation: 'relu'
  mlp_dropout: 0.1
  mlp_batchnorm: False
  mlp_batchnorm_last: False
  mlp_linear_first: False

widedeep_tab_resnet:
  _target_: src.models.tabular.widedeep.tab_resnet.TabResnetModel
  task: ${task}
  loss_type: "L1Loss"
  input_dim: ${in_dim}
  output_dim: ${out_dim}
  optimizer_lr: 0.1
  optimizer_weight_decay: 0.0
  scheduler_step_size: 100
  scheduler_gamma: 0.9
  column_idx: null
  cat_embed_input: null
  cat_embed_dropout: 0.1
  use_cat_bias: False
  cat_embed_activation: null
  continuous_cols: null
  cont_norm_layer: 'batchnorm'
  embed_continuous: False
  cont_embed_dim: 32
  cont_embed_dropout: 0.1
  use_cont_bias: True
  cont_embed_activation: null
  blocks_dims:
  - 200
  - 100
  - 100
  - ${out_dim}
  blocks_dropout: 0.1
  simplify_blocks: False
  mlp_hidden_dims: null
  mlp_activation: 'relu'
  mlp_dropout: 0.1
  mlp_batchnorm: False
  mlp_batchnorm_last: False
  mlp_linear_first: False

callbacks:
  model_checkpoint:
    monitor: "val/${optimized_metric}_pl" # name of the logged metric which determines when model is improving
    mode: ${direction} # can be "max" or "min"
    save_top_k: 1 # save k best models (determined by above metric)
    save_last: False # additionaly always save model from last epoch
    verbose: False
    dirpath: ""
    filename: "best"
    auto_insert_metric_name: False

  early_stopping:
    monitor: "val/${optimized_metric}_pl" # name of the logged metric which determines when model is improving
    mode: ${direction} # can be "max" or "min"
    patience: ${patience} # how many epochs of not improving until training stops
    min_delta: 0 # minimum change in the monitored metric needed to qualify as an improvement
